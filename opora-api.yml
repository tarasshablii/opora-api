openapi: 3.0.3
info:
  title: Opora API
  description: API for connecting donors with humanitarian initiatives
  version: "1.0.0"
servers:
  - url: 'http://localhost:8080'
    description: localhost
tags:
  - name: Sponsors
    description: API related to registered users who can create and modify initiatives
  - name: Initiatives
    description: API related to humanitarian initiatives organized by sponsors
  - name: Media
    description: API for accessing media files

paths:
  /v1/sponsors:
    get:
      tags:
        - Sponsors
      summary: Get a list of all sponsors
      responses:
        '200':
          description: A list of sponsors
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Sponsor'
        '500':
          $ref: '#/components/responses/InternalServerError'
    post:
      tags:
        - Sponsors
      summary: Register a new sponsor
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Sponsor'
      responses:
        '201':
          description: Sponsor successfully created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Sponsor'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/InternalServerError'
      security:
        - OAuth2: [ ]

  /v1/sponsors/{id}:
    get:
      tags:
        - Sponsors
      summary: Get a sponsor by ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Sponsor details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Sponsor'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
    put:
      tags:
        - Sponsors
      summary: Update a sponsor by ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Sponsor'
      responses:
        '200':
          description: Sponsor successfully updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Sponsor'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
      security:
        - OAuth2: [ ]
    patch:
      tags:
        - Sponsors
      summary: Partially update a sponsor by ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Sponsor'
      responses:
        '200':
          description: Sponsor successfully updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Sponsor'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
      security:
        - OAuth2: [ ]
    delete:
      tags:
        - Sponsors
      summary: Delete a sponsor by ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: Sponsor successfully deleted
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
      security:
        - OAuth2: [ ]

  /v1/initiatives:
    get:
      tags:
        - Initiatives
      summary: Get a list of all initiatives
      parameters:
        - name: sponsor
          in: query
          required: false
          schema:
            type: string
            format: uuid
          description: Optional sponsor ID to filter the initiatives
      responses:
        '200':
          description: A list of initiatives
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Initiative'
        '500':
          $ref: '#/components/responses/InternalServerError'
    post:
      tags:
        - Initiatives
      summary: Register a new initiative
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Initiative'
      responses:
        '201':
          description: Initiative successfully created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Initiative'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/InternalServerError'
      security:
        - OAuth2: [ ]

  /v1/initiatives/{id}:
    get:
      tags:
        - Initiatives
      summary: Get an initiative by ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Initiative details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Initiative'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
    put:
      tags:
        - Initiatives
      summary: Update an initiative by ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Initiative'
      responses:
        '200':
          description: Initiative successfully updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Initiative'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
      security:
        - OAuth2: [ ]
    patch:
      tags:
        - Initiatives
      summary: Partially update an initiative by ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Initiative'
      responses:
        '200':
          description: Initiative successfully updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Initiative'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
      security:
        - OAuth2: [ ]
    delete:
      tags:
        - Initiatives
      summary: Delete an initiative by ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: Initiative successfully deleted
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
      security:
        - OAuth2: [ ]

  /v1/media:
    post:
      tags:
        - Media
      summary: Upload a new image
      requestBody:
        required: true
        content:
          image/png:
            schema:
              type: string
              format: binary
          image/jpeg:
            schema:
              type: string
              format: binary
      responses:
        '201':
          description: Image successfully uploaded
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    format: uuid
                  url:
                    type: string
                    format: uri
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/InternalServerError'
      security:
        - OAuth2: [ ]

  /v1/media/{id}:
    get:
      tags:
        - Media
      summary: Get an image by ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Image details
          content:
            image/png:
              schema:
                type: string
                format: binary
            image/jpeg:
              schema:
                type: string
                format: binary
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
    put:
      tags:
        - Media
      summary: Update an image by ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          image/png:
            schema:
              type: string
              format: binary
          image/jpeg:
            schema:
              type: string
              format: binary
      responses:
        '200':
          description: Image successfully updated
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
      security:
        - OAuth2: [ ]
    delete:
      tags:
        - Media
      summary: Delete an image by ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: Image successfully deleted
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
      security:
        - OAuth2: [ ]

components:
  schemas:

    Sponsor:
      type: object
      required:
        - id
        - name
        - description
        - contacts
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        description:
          type: string
        media:
          type: string
          format: uuid
        contacts:
          type: array
          minItems: 1
          items:
            $ref: '#/components/schemas/Contact'

    Initiative:
      type: object
      required:
        - id
        - title
        - description
        - status
        - sponsor
        - contacts
        - directions
        - items
      properties:
        id:
          type: string
          format: uuid
        title:
          type: string
        description:
          type: string
        media:
          type: string
          format: uuid
        status:
          type: string
          enum:
            - ACTIVE
            - COMPLETED
            - CANCELED
        isUrgent:
          type: boolean
          default: false
        progress:
          type: integer
          minimum: 0
          maximum: 100
        sponsor:
          $ref: '#/components/schemas/Sponsor'
        contacts:
          type: array
          minItems: 1
          items:
            $ref: '#/components/schemas/Contact'
        directions:
          type: array
          minItems: 1
          items:
            $ref: '#/components/schemas/Direction'
        items:
          type: array
          minItems: 1
          items:
            $ref: '#/components/schemas/Item'

    Contact:
      type: object
      required:
        - firstName
        - lastName
        - phone
      properties:
        firstName:
          type: string
        lastName:
          type: string
        phone:
          type: array
          minItems: 1
          items:
            type: string
        email:
          type: string
          format: email

    Direction:
      type: object
      required: [ ]
      properties:
        address:
          $ref: '#/components/schemas/Address'
        novaPoshta:
          $ref: '#/components/schemas/NovaPoshta'

    Address:
      type: object
      required:
        - street
        - town
      properties:
        street:
          type: string
        town:
          type: string
        description:
          type: string

    NovaPoshta:
      type: object
      required:
        - town
        - office
        - recipient
      properties:
        town:
          type: string
        office:
          type: integer
        recipient:
          $ref: '#/components/schemas/Contact'

    Item:
      type: object
      required:
        - title
        - target
      properties:
        title:
          type: string
        description:
          type: string
        media:
          type: string
          format: uuid
        target:
          type: integer
        current:
          type: integer

    Media:
      type: object
      required:
        - id
      properties:
        id:
          type: string
          format: uuid
        description:
          type: string

    Error:
      type: object
      properties:
        message:
          type: string
          description: A human-readable message providing more details about the error.
        details:
          type: string
          description: Additional details about the error, if available.
        errors:
          type: array
          items:
            type: object
            properties:
              field:
                type: string
                description: The field associated with this error.
              message:
                type: string
                description: A human-readable message providing more details about the field error.
          description: An array of errors relating to specific fields in the request.

  securitySchemes:
    OAuth2:
      type: oauth2
      flows:
        password:
          tokenUrl: https://example.com/oauth/token
          scopes: { }

  responses:
    BadRequest:
      description: The request could not be understood or was missing required parameters.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    Unauthorized:
      description: Authentication credentials were missing or incorrect.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    Forbidden:
      description: The request was valid but the server is refusing action. The user might not have the necessary permissions for a resource.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    NotFound:
      description: The requested resource was not found.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

    InternalServerError:
      description: The server encountered an internal error or misconfiguration and was unable to complete your request.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'